// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_PRISMA_URL") // uses connection pooling
  directUrl = env("DB_URL_NON_POOLING") // uses a direct connection
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id                     String                  @id @unique @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          Boolean?                @default(false)
  picture                String?
  githubId               Int?                    @unique
  sessions               Session[]
  emailVerificationCodes EmailVerificationCode[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  // Subscription limits
  planType          PlanType @default(FREE)
  storageUsed       BigInt   @default(0) // in bytes
  monthlyExportCount Int     @default(0)
  exportCountResetAt DateTime?

  drivers      Driver[]
  vehicles     Vehicle[]
  companies    Company[]
  expenseTypes ExpenseType[]
  revenueTypes RevenueType[]
  paymentMethods PaymentMethod[]
  preferences  UserPreferences?
  goals        Goal[]
  budgets      Budget[]
  insights     Insight[]
  alerts       Alert[]
  attachments  Attachment[]
  reports      Report[]
  reminders    Reminder[]
  teamMembers  TeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PlanType {
  FREE
  SIMPLE
  PRO
}

model Driver {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenses  Expense[]
  revenues  Revenue[]
  workLogs  WorkLog[]
  goals     Goal[]
  teamMember TeamMember?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Vehicle {
  id        String   @id @default(cuid())
  name      String
  plate     String?
  model     String?
  year      Int?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenses     Expense[]
  revenues     Revenue[]
  workLogs     WorkLog[]
  maintenances Maintenance[]
  goals        Goal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Company {
  id       String    @id @default(cuid())
  name     String
  icon     String?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  revenues Revenue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ExpenseType {
  id       String    @id @default(cuid())
  name     String
  icon     String?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenses  Expense[]
  budgets   Budget[]
  reminders Reminder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model RevenueType {
  id       String    @id @default(cuid())
  name     String
  icon     String?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  revenues Revenue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum FeeType {
  NONE
  PERCENTAGE
  FIXED
  BOTH
}

model PaymentMethod {
  id              String    @id @default(cuid())
  name            String
  icon            String?
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Fee configuration
  feeType         FeeType   @default(NONE)
  feePercentage   Float?    // Ex: 2.5 for 2.5%
  feeFixed        Float?    // Ex: 0.50 for R$ 0.50

  expenses Expense[]
  revenues Revenue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Expense {
  id              String         @id @default(cuid())
  description     String?
  amount          Float
  date            DateTime
  receiptUrl      String?

  expenseTypeId   String
  expenseType     ExpenseType    @relation(fields: [expenseTypeId], references: [id], onDelete: Cascade)

  paymentMethodId String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)

  driverId        String?
  driver          Driver?        @relation(fields: [driverId], references: [id], onDelete: SetNull)

  vehicleId       String?
  vehicle         Vehicle?       @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  attachments     Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expenseTypeId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([date])
}

model Revenue {
  id              String         @id @default(cuid())
  description     String?
  amount          Float
  date            DateTime
  kmDriven        Float?
  hoursWorked     Float?
  tripType        String?
  receiptUrl      String?

  revenueTypeId   String?
  revenueType     RevenueType?   @relation(fields: [revenueTypeId], references: [id], onDelete: SetNull)

  companyId       String?
  company         Company?       @relation(fields: [companyId], references: [id], onDelete: SetNull)

  paymentMethodId String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)

  driverId        String?
  driver          Driver?        @relation(fields: [driverId], references: [id], onDelete: SetNull)

  vehicleId       String?
  vehicle         Vehicle?       @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  attachments     Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([date])
}

model WorkLog {
  id           String   @id @default(cuid())
  date         DateTime
  kmDriven     Float
  hoursWorked  Float

  driverId     String?
  driver       Driver?  @relation(fields: [driverId], references: [id], onDelete: SetNull)

  vehicleId    String?
  vehicle      Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([driverId])
  @@index([vehicleId])
  @@index([date])
}

model Maintenance {
  id          String   @id @default(cuid())
  description String
  cost        Float
  date        DateTime
  kmAtService Float?
  nextServiceKm Float?
  receiptUrl  String?

  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vehicleId])
  @@index([date])
}

model UserPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Appearance
  theme     String   @default("system") // light, dark, system
  language  String   @default("en") // en, pt

  // Regional
  currency  String   @default("brl") // usd, brl, eur
  timezone  String   @default("America/Sao_Paulo")
  use24HourFormat Boolean @default(false)

  // Notifications
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(false)
  marketingEmails    Boolean @default(false)

  // Privacy
  analytics          Boolean @default(true)
  profileVisibility  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// ============================================
// New Features: Goals, Budgets, Insights, etc.
// ============================================

enum GoalType {
  DAILY_REVENUE
  WEEKLY_REVENUE
  MONTHLY_REVENUE
  MONTHLY_PROFIT
  MONTHLY_KM
  MONTHLY_HOURS
  CUSTOM
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String?
  type        GoalType
  targetValue Float
  period      String   // "2025-01" for monthly, "2025-01-15" for daily

  driverId    String?
  driver      Driver?  @relation(fields: [driverId], references: [id], onDelete: SetNull)

  vehicleId   String?
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([period])
  @@index([driverId])
  @@index([vehicleId])
}

model Budget {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  name            String?
  expenseTypeId   String
  expenseType     ExpenseType @relation(fields: [expenseTypeId], references: [id], onDelete: Cascade)

  monthlyLimit    Float
  alertThreshold  Float       @default(0.8) // Alert at 80%
  period          String      // "2025-01"

  isActive        Boolean     @default(true)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([period])
  @@index([expenseTypeId])
}

enum InsightType {
  COST_INCREASE
  COST_DECREASE
  REVENUE_INCREASE
  REVENUE_DECREASE
  EFFICIENCY_IMPROVED
  EFFICIENCY_DECLINED
  GOAL_ACHIEVED
  BUDGET_EXCEEDED
  MAINTENANCE_DUE
  PATTERN_DETECTED
}

model Insight {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        InsightType
  title       String
  description String
  metadata    Json?       // Additional data

  isRead      Boolean     @default(false)
  priority    Int         @default(0) // 0=low, 1=medium, 2=high

  createdAt   DateTime    @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

enum AlertType {
  BUDGET_WARNING
  BUDGET_EXCEEDED
  GOAL_PROGRESS
  MAINTENANCE_REMINDER
  EXPENSE_REMINDER
  REVENUE_REMINDER
  DAILY_LOG_REMINDER
}

model Alert {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        AlertType
  title       String
  message     String
  metadata    Json?

  isRead      Boolean   @default(false)
  isSent      Boolean   @default(false)

  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([isSent])
}

model Attachment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  fileName    String
  fileUrl     String
  fileSize    BigInt   // in bytes
  mimeType    String

  expenseId   String?
  expense     Expense? @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  revenueId   String?
  revenue     Revenue? @relation(fields: [revenueId], references: [id], onDelete: Cascade)

  maintenanceId String?
  maintenance   Maintenance? @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)

  metadata    Json?    // OCR data, tags, etc.

  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([expenseId])
  @@index([revenueId])
  @@index([maintenanceId])
}

enum ReportType {
  MONTHLY_SUMMARY
  DRE
  CARNE_LEAO
  EXPENSE_BREAKDOWN
  REVENUE_BREAKDOWN
  DRIVER_PERFORMANCE
  VEHICLE_PERFORMANCE
  CUSTOM
}

model Report {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  type        ReportType
  format      String     // pdf, excel, csv

  startDate   DateTime
  endDate     DateTime

  fileUrl     String?
  metadata    Json?

  createdAt   DateTime   @default(now())

  @@index([userId])
  @@index([createdAt])
}

enum ReminderFrequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Reminder {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  description String?

  frequency   ReminderFrequency
  nextDate    DateTime

  expenseTypeId String?
  expenseType   ExpenseType? @relation(fields: [expenseTypeId], references: [id], onDelete: SetNull)

  isActive    Boolean   @default(true)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([nextDate])
  @@index([isActive])
}

enum TeamRole {
  OWNER
  ADMIN
  DRIVER
  VIEWER
}

model TeamMember {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  email       String
  name        String?
  role        TeamRole

  driverId    String?  @unique
  driver      Driver?  @relation(fields: [driverId], references: [id], onDelete: SetNull)

  inviteToken String?  @unique
  acceptedAt  DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([email])
  @@index([driverId])
}

